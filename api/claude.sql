-- Existing tables
CREATE TABLE IF NOT EXISTS TASKS(
    TID INTEGER PRIMARY KEY AUTOINCREMENT,
    NAME TEXT NOT NULL,
    DURATION INT,
    CATEGORY CHAR(50),
    POINTS INT NOT NULL,
    DIRECTORY TEXT,
    P_TID INT,
    FOREIGN KEY (P_TID) REFERENCES TASKS (TID)
);

CREATE TABLE IF NOT EXISTS TASKTAG(
    TID INT NOT NULL,
    TAG CHAR(50) NOT NULL,
    PRIMARY KEY (TID, TAG),
    FOREIGN KEY (TID) REFERENCES TASKS (TID)
);

-- New tables for experience and knowledge management
CREATE TABLE IF NOT EXISTS EXPERIENCES(
    EID INTEGER PRIMARY KEY AUTOINCREMENT,
    USER_ID INTEGER NOT NULL,
    TIMESTAMP DATETIME DEFAULT CURRENT_TIMESTAMP,
    TITLE TEXT NOT NULL,
    DESCRIPTION TEXT,
    EMOTIONAL_IMPACT FLOAT,  -- Scale from -1 to 1
    VECTOR_ID TEXT UNIQUE,   -- Reference to vector store
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS KNOWLEDGE_NODES(
    KID INTEGER PRIMARY KEY AUTOINCREMENT,
    TITLE TEXT NOT NULL,
    CONTENT TEXT,
    VECTOR_ID TEXT UNIQUE,
    CONFIDENCE_SCORE FLOAT,  -- How sure we are about this knowledge
    SOURCE_TYPE TEXT,        -- e.g., 'experience', 'learning', 'reflection'
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS KNOWLEDGE_RELATIONSHIPS(
    SOURCE_KID INTEGER,
    TARGET_KID INTEGER,
    RELATIONSHIP_TYPE TEXT,  -- e.g., 'supports', 'contradicts', 'builds_upon'
    STRENGTH FLOAT,         -- Relationship strength from 0 to 1
    PRIMARY KEY (SOURCE_KID, TARGET_KID),
    FOREIGN KEY (SOURCE_KID) REFERENCES KNOWLEDGE_NODES(KID),
    FOREIGN KEY (TARGET_KID) REFERENCES KNOWLEDGE_NODES(KID)
);

-- Linking tasks to knowledge and experiences
CREATE TABLE IF NOT EXISTS TASK_KNOWLEDGE_MAP(
    TID INTEGER,
    KID INTEGER,
    RELEVANCE_SCORE FLOAT,  -- How relevant this knowledge is to the task
    PRIMARY KEY (TID, KID),
    FOREIGN KEY (TID) REFERENCES TASKS(TID),
    FOREIGN KEY (KID) REFERENCES KNOWLEDGE_NODES(KID)
);
